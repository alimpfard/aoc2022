import utils { read_file, split }

function abs(anon x: i64) -> i64 {
    if x < 0 {
        return -x
    }
    return x
}

function sign(anon x: i64) -> i64 {
    if x < 0 {
        return -1
    }
    if x > 0 {
        return 1
    }
    return 0
}

struct Grid {
    visited: {String}

    function apply_position_diff(
        mut this
        head_position: &mut (i64, i64)
        tail_position: &mut (i64, i64)
        dx: i64
        dy: i64
    ) throws {
        defer {
            .visited.add(format("{}.{}", tail_position.0, tail_position.1))
        }

        head_position.0 += dx
        head_position.1 += dy

        let y = abs(head_position.1 - tail_position.1)
        let x = abs(head_position.0 - tail_position.0)

        if y > 1 {
            if x == 1 {
                tail_position.0 += sign(head_position.0 - tail_position.0)
            }
            tail_position.1 += sign(head_position.1 - tail_position.1)
        }

        if x > 1 {
            if y == 1 {
                tail_position.1 += sign(head_position.1 - tail_position.1)
            }

            tail_position.0 += sign(head_position.0 - tail_position.0)
        }
    }
}

function solution() throws {
    mut head_position = (0, 0)
    mut tail_position = head_position
    mut visited = Grid(visited: {"0.0"})

    for line in split(read_file(path: "data/day9"), b'\n') {
        let parts = split(line, b' ')

        let direction = parts[0]
        let count = parts[1].to_int()!

        let (dx, dy) = match direction {
            "R" => (1, 0)
            "L" => (-1, 0)
            "U" => (0, 1)
            "D" => (0, -1)
            else => (0, 0)
        }

        for _ in 0..count {
            visited.apply_position_diff(&mut head_position, &mut tail_position, dx, dy)
        }
    }

    eprintln("visited: {}", visited.visited.size())
}
