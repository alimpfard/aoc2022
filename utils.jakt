function read_file(path: String) throws -> String {
    mut file = File::open_for_reading(path)
    let contents = file.read_all()
    mut builder = StringBuilder::create()
    for byte in contents.iterator() {
        builder.append(byte)
    }

    return builder.to_string()
}

function read_file_bytes(path: String) throws -> [u8] {
    mut file = File::open_for_reading(path)
    return file.read_all()
}

function reduce<T, Acc>(self: &Array<T>, accumulator: Acc, anon f: &function(accumulator: Acc, value: &T) -> Acc) -> Acc {
    mut acc = accumulator
    mut i = 0uz
    while i < self.size() {
        acc = f(accumulator: acc, value: &self[i])
        i += 1
    }
    return acc
}

function split(anon x: String, anon y: u8) throws -> [String] {
    mut result: [String] = []
    mut current = StringBuilder::create()
    for i in 0..(x.length()) {
        let byte = x.byte_at(i)
        if byte == y {
            result.push(current.to_string())
            current.clear()
        } else {
            current.append(byte)
        }
    }

    result.push(current.to_string())
    return result
}

function split_no_throw(anon value: String, anon s: c_char) -> [String] {
    mut result: [String]? = None
    try {
        result = split(value, s as! u8)
    } catch error {
        eprintln("Error: {}", error)
    }

    return result!
}