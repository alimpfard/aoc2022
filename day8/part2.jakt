import utils { read_file, split, reduce_throw }

function map<T, U>(anon xs: Array<T>, anon f: &function(anon x: T) throws -> U) throws -> [U] {
    mut ys: [U] = []
    for x in xs {
        ys.push(f(x))
    }
    return ys
}

function transpose<T>(anon xs: [[T]]) throws -> [[T]] {
    mut ys: [[T]] = []
    for i in 0..xs[0].size() {
        mut row: [T] = []
        for j in 0..xs.size() {
            row.push(xs[j][i])
        }
        ys.push(row)
    }
    return ys
}

function score(mut acc: [[usize]], x: &[u8]) throws {
    mut row_results: [usize] = [0; x.size()]
    for i in 1..(x.size() - 1) {
        mut a = x[i]
        // left
        mut left = 0uz
        for j in ((i - 1)..0).inclusive() {
            left += 1
            if x[j] >= a {
                break
            }
        }

        // right
        mut right = 0uz
        for j in (i + 1)..x.size() {
            right += 1
            if x[j] >= a {
                break
            }
        }

        row_results[i] = left * right
    }

    acc.push(row_results)
}

function flat<V>(anon xs: [[V]]) throws -> [V] {
    mut ys: [V] = []
    for x in xs {
        for y in x {
            ys.push(y)
        }
    }
    return ys
}

function mul_zip<T>(anon xs: [T], anon ys: [T]) throws -> [T] {
    mut zs: [T] = []
    for i in 0..xs.size() {
        zs.push(xs[i] * ys[i])
    }
    return zs
}

function max<V>(anon xs: [V]) -> V {
    mut max: V = xs[0]
    for x in xs {
        if x > max {
            max = x
        }
    }
    return max
}

function solution() throws {
    let rows = map(split(read_file(path: "data/day8"), b'\n'), &function(anon row: String) throws -> [u8] {
        mut xs: [u8] = []
        for i in 0..row.length() {
            xs.push(row.byte_at(i) - b'0')
        }
        return xs
    })
    let transposed = transpose(rows)

    // Look rowwise
    mut accumulator: [[usize]] = []
    let rowwise = reduce_throw(
        self: &rows
        accumulator
        &function(anon acc: [[usize]], anon x: &[u8]) throws -> [[usize]] {
            mut macc = acc
            score(acc: macc, x)
            return macc
        }
    )

    accumulator = []
    let colwise = transpose(reduce_throw(
        self: &transposed
        accumulator
        &function(anon acc: [[usize]], anon x: &[u8]) throws -> [[usize]] {
            mut macc = acc
            score(acc: macc, x)
            return macc
        }
    ))

    // println("{}", rowwise)
    // println("{}", colwise)

    let fr = flat(rowwise)
    let fc = flat(colwise)
    println("{}", max(mul_zip(fr, fc)))
}