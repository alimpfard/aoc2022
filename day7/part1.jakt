import utils { read_file, split }

boxed enum DirectoryEntry {
    Directory(contents: [String: DirectoryEntry])
    File(size: usize)

    function contains(mut this, anon name: String) -> bool => match this {
        Directory(contents) => contents.contains(name)
        File => false
    }

    function sub(mut this, anon name: String) -> DirectoryEntry => match this {
        Directory(contents) => contents.get(name)!
        File => {
            abort()
        }
    }

    function add_entry(mut this, name: String, anon entry: DirectoryEntry) throws {
        match this {
            Directory(&mut contents) => {
                contents[name] = entry
            }
            File => {
                abort()
            }
        }
    }

    function size(this) -> usize => match this {
        Directory(contents) => {
            mut size: usize = 0
            for (_, c) in contents {
                size += c.size()
            }
            yield size
        }
        File(size) => size
    }

    function walk(
        this
        path: [String]? = None
        f: &mut function(anon path: [String], anon entry: &DirectoryEntry, x: &mut usize) throws -> void
        anon x: &mut usize
    ) throws {
        let pp: [String] = []
        f(path: path ?? pp, &this, x)

        match this {
            Directory(contents) => {
                for (name, entry) in contents {
                    mut p = path ?? pp
                    p.push(name)
                    entry.walk(path: p, f, x)
                }
            }
            File => { }
        }
    }
}

function ensure_dir(anon mut root: DirectoryEntry, anon cwd: [String]) throws -> DirectoryEntry {
    mut dir = root
    for part in cwd {
        if not dir.contains(part) {
            dir.add_entry(name: part, DirectoryEntry::Directory(contents: [:]))
        }
        dir = dir.sub(part)
    }

    return dir
}

function ensure_file(
    anon mut root: DirectoryEntry
    anon cwd: [String]
    anon name: String
    anon size: usize
) throws -> DirectoryEntry {
    mut dir = ensure_dir(root, cwd)
    if dir.contains(name) {
        return dir.sub(name)
    }

    let file = DirectoryEntry::File(size)
    dir.add_entry(name, file)
    return file
}

function cd(mut root: DirectoryEntry, mut cwd: [String], anon parts: ArraySlice<String>) throws -> void {
    mut b = StringBuilder::create()
    mut first = true
    for part in parts {
        if first {
            first = false
        } else {
            b.append(b' ')
        }
        b.append_string(part)
    }
    let path = b.to_string()
    match path {
        ".." => {
            cwd.pop()
        }
        "/" => {
            cwd = []
        }
        "." => {
            // do nothing
        }
        else => {
            cwd.push(path)
            ensure_dir(root, cwd)
        }
    }
    return
}

function solution() throws {
    let lines = split(read_file(path: "data/day7"), b'\n')
    mut root: DirectoryEntry = DirectoryEntry::Directory(contents: [:])
    mut cwd: [String] = []
    mut in_ls = false

    for line in lines {
        if line.starts_with("$") {
            in_ls = false
            let cmd = line.substring(start: 2, length: line.length() - 2)
            let parts = cmd.split(' ')
            if parts[0] == "cd" {
                cd(root, cwd, parts[1..])
            } else if parts[0] == "ls" {
                in_ls = true
            }
        } else if in_ls {
            let parts = line.split(' ')
            if parts[0] == "dir" {
                continue
            }
            ensure_file(root, cwd, name: parts[1], size: parts[0].to_uint()! as! usize)
        } else {
            eprintln("Stray line {}", line)
        }
    }

    mut total_size = 0uz
    mut f = function(anon path: [String], anon entry: &DirectoryEntry, anon total_size: &mut usize) throws {
        if entry is Directory and entry.size() < 100_000 {
            total_size += entry.size()
        }
        return
    }
    root.walk(f: &mut f, x: &mut total_size)

    println("Part 1: {}", total_size)
}